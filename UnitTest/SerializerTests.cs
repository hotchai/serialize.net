#region License
// Copyright (c) 2014, David Taylor
//
// Permission to use, copy, modify, and/or distribute this software for any 
// purpose with or without fee is hereby granted, provided that the above 
// copyright notice and this permission notice appear in all copies, unless 
// such copies are solely in the form of machine-executable object code 
// generated by a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES 
// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF 
// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR 
// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES 
// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN 
// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF 
// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#endregion License
using System;
using System.Diagnostics;
using System.IO;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace HotChai.Serialization.UnitTest
{
    [TestClass]
    public sealed class SerializerTests
    {
        [TestMethod]
        [TestCategory("PortableBinary")]
        public void TestSimpleObjectBinarySerialization()
        {
            var factory = new PortableBinaryObjectReaderWriterFactory();

            TestSimpleObjectSerialization(factory);
        }

        [TestMethod]
        [TestCategory("PortableBinary")]
        public void TestComplexObjectBinarySerialization()
        {
            var factory = new PortableBinaryObjectReaderWriterFactory();

            TestComplexObjectSerialization(factory);
        }

        [TestMethod]
        [TestCategory("Json")]
        public void TestSimpleObjectJsonSerialization()
        {
            var factory = new JsonObjectReaderWriterFactory();

            TestSimpleObjectSerialization(factory);
        }

        [TestMethod]
        [TestCategory("Json")]
        public void TestComplexObjectJsonSerialization()
        {
            var factory = new JsonObjectReaderWriterFactory();

            TestComplexObjectSerialization(factory);
        }

        [TestMethod]
        [TestCategory("Xml")]
        public void TestSimpleObjectXmlSerialization()
        {
            var factory = new XmlObjectReaderWriterFactory();

            TestSimpleObjectSerialization(factory);
        }

        [TestMethod]
        [TestCategory("Xml")]
        public void TestComplexObjectXmlSerialization()
        {
            var factory = new XmlObjectReaderWriterFactory();

            TestComplexObjectSerialization(factory);
        }

        [TestMethod]
        [TestCategory("Bencoding")]
        public void TestSimpleObjectBencodingSerialization()
        {
            var factory = new BencodingObjectReaderWriterFactory();

            TestSimpleObjectSerialization(factory);
        }

        [TestMethod]
        [TestCategory("Bencoding")]
        public void TestComplexObjectBencodingSerialization()
        {
            var factory = new BencodingObjectReaderWriterFactory();

            TestComplexObjectSerialization(factory);
        }

        [TestMethod]
        [TestCategory("Performance")]
        public void TestSimpleObjectPerformance()
        {
            TestSimpleObjectPerformance(new PortableBinaryObjectReaderWriterFactory());
            TestSimpleObjectPerformance(new BencodingObjectReaderWriterFactory());
            TestSimpleObjectPerformance(new JsonObjectReaderWriterFactory());
            TestSimpleObjectPerformance(new XmlObjectReaderWriterFactory());
        }

        [TestMethod]
        [TestCategory("Performance")]
        public void TestComplexObjectPerformance()
        {
            TestComplexObjectPerformance(new PortableBinaryObjectReaderWriterFactory());
            TestComplexObjectPerformance(new BencodingObjectReaderWriterFactory());
            TestComplexObjectPerformance(new JsonObjectReaderWriterFactory());
            TestComplexObjectPerformance(new XmlObjectReaderWriterFactory());
        }

        public void TestSimpleObjectPerformance(
            ObjectReaderWriterFactory factory)
        {
            const int WarmupIterations = 10;
            const int Iterations = 1000;

            Stopwatch writeStopWatch = new Stopwatch();

            byte[] buffer = new byte[128 * 1024];
            byte[] serialized;

            SimpleObject writeObject = SimpleObject.Create();

            // Serialize the test object to a byte array
            using (var stream = new MemoryStream(buffer))
            {
                IObjectWriter writer;

                GC.Collect(3, GCCollectionMode.Forced, true);

                // Warm-up
                for (int i = 0; i < WarmupIterations; i += 1)
                {
                    stream.SetLength(0);
                    writer = factory.CreateWriter(stream);
                    SimpleObject.WriteTo(writer, writeObject);
                }

                writeStopWatch.Start();

                for (int i = 0; i < Iterations; i += 1)
                {
                    stream.SetLength(0);
                    writer = factory.CreateWriter(stream);
                    SimpleObject.WriteTo(writer, writeObject);
                }

                writeStopWatch.Stop();

                serialized = stream.ToArray();
            }

            Test.Output("{0} writer serialized {1} simple objects ({2:#,###} bytes each) in {3} ms ({4} ticks @ {5}). Average is {6} ticks per object.",
                factory.Name, Iterations, serialized.Length, writeStopWatch.Elapsed.TotalMilliseconds, writeStopWatch.ElapsedTicks, Stopwatch.Frequency, writeStopWatch.ElapsedTicks / Iterations);

            Stopwatch readStopWatch = new Stopwatch();

            SimpleObject readObject = null;

            // Deserialize the test object from a byte array
            using (var stream = new MemoryStream(serialized))
            {
                IObjectReader reader;

                // Warm-up
                for (int i = 0; i < WarmupIterations; i += 1)
                {
                    stream.Seek(0, SeekOrigin.Begin);
                    reader = factory.CreateReader(stream);
                    readObject = SimpleObject.ReadFrom(reader);
                }

                readStopWatch.Start();

                for (int i = 0; i < Iterations; i += 1)
                {
                    stream.Seek(0, SeekOrigin.Begin);
                    reader = factory.CreateReader(stream);
                    readObject = SimpleObject.ReadFrom(reader);
                }

                readStopWatch.Stop();
            }

            Test.Output("{0} reader deserialized {1} simple objects ({2:#,###} bytes each) in {3} ms ({4} ticks @ {5}). Average is {6} ticks per object.",
                factory.Name, Iterations, serialized.Length, readStopWatch.Elapsed.TotalMilliseconds, readStopWatch.ElapsedTicks, Stopwatch.Frequency, readStopWatch.ElapsedTicks / Iterations);

            // Compare objects
            writeObject.VerifyIsEqual(readObject);
        }

        public void TestComplexObjectPerformance(
            ObjectReaderWriterFactory factory)
        {
            const int WarmupIterations = 10;
            const int Iterations = 100;

            Stopwatch writeStopWatch = new Stopwatch();

            byte[] buffer = new byte[128 * 1024];
            byte[] serialized;

            ComplexObject writeObject = ComplexObject.Create();

            // Serialize the test object to a byte array
            using (var stream = new MemoryStream(buffer))
            {
                IObjectWriter writer;

                GC.Collect(3, GCCollectionMode.Forced, true);

                // Warm-up
                for (int i = 0; i < WarmupIterations; i += 1)
                {
                    stream.SetLength(0);
                    writer = factory.CreateWriter(stream);
                    ComplexObject.WriteTo(writer, writeObject);
                }

                writeStopWatch.Start();

                for (int i = 0; i < Iterations; i += 1)
                {
                    stream.SetLength(0);
                    writer = factory.CreateWriter(stream);
                    ComplexObject.WriteTo(writer, writeObject);
                }

                writeStopWatch.Stop();

                serialized = stream.ToArray();
            }

            Test.Output("{0} writer serialized {1} complex objects ({2:#,###} bytes each) in {3} ms ({4} ticks @ {5}). Average is {6} ticks per object.",
                factory.Name, Iterations, serialized.Length, writeStopWatch.Elapsed.TotalMilliseconds, writeStopWatch.ElapsedTicks, Stopwatch.Frequency, writeStopWatch.ElapsedTicks / Iterations);

            Stopwatch readStopWatch = new Stopwatch();

            ComplexObject readObject = null;

            // Deserialize the test object from a byte array
            using (var stream = new MemoryStream(serialized))
            {
                IObjectReader reader;

                // Warm-up
                for (int i = 0; i < WarmupIterations; i += 1)
                {
                    stream.Seek(0, SeekOrigin.Begin);
                    reader = factory.CreateReader(stream);
                    readObject = ComplexObject.ReadFrom(reader);
                }

                readStopWatch.Start();

                for (int i = 0; i < Iterations; i += 1)
                {
                    stream.Seek(0, SeekOrigin.Begin);
                    reader = factory.CreateReader(stream);
                    readObject = ComplexObject.ReadFrom(reader);
                }

                readStopWatch.Stop();
            }

            Test.Output("{0} reader deserialized {1} complex objects ({2:#,###} bytes each) in {3} ms ({4} ticks @ {5}). Average is {6} ticks per object.",
                factory.Name, Iterations, serialized.Length, readStopWatch.Elapsed.TotalMilliseconds, readStopWatch.ElapsedTicks, Stopwatch.Frequency, readStopWatch.ElapsedTicks / Iterations);

            // Compare objects
            writeObject.VerifyIsEqual(readObject);
        }

        private void TestSimpleObjectSerialization(
            ObjectReaderWriterFactory factory)
        {
            Stopwatch writeStopWatch = new Stopwatch();
            Stopwatch readStopWatch = new Stopwatch();

            SimpleObject writeObject = SimpleObject.Create();

            byte[] serialized;

            var writerInspector = new TestSerializationInspector();

            // Serialize the test object to a byte array
            using (var stream = new MemoryStream())
            {
                var writer = factory.CreateWriter(stream);

                writer.Inspector = writerInspector;

                writeStopWatch.Start();

                SimpleObject.WriteTo(writer, writeObject);

                writeStopWatch.Stop();

                serialized = stream.ToArray();
            }

            string writeDump = serialized.ToAsciiDumpString();
            Debug.WriteLine(writeDump);
            Test.Output("{0} writer wrote {1} bytes in {2}ms", factory.Name, serialized.Length, writeStopWatch.ElapsedMilliseconds);

            // Validate inspector stream
            byte[] writerInspectorBytes = writerInspector.ToByteArray();
            if (!ArrayComparer<byte>.Equals(writerInspectorBytes, serialized))
            {
                throw new InvalidOperationException("ISerializationInspector byte stream does not match the serialized byte stream.");
            }

            var readerInspector = new TestSerializationInspector();

            SimpleObject readObject = null;

            // Deserialize the test object from a byte array
            using (var stream = new MemoryStream(serialized))
            {
                var reader = factory.CreateReader(stream);

                reader.Inspector = readerInspector;

                readStopWatch.Start();

                readObject = SimpleObject.ReadFrom(reader);

                readStopWatch.Stop();
            }

            Test.Output("{0} reader read {1} bytes in {2}ms", factory.Name, serialized.Length, readStopWatch.ElapsedMilliseconds);

            // Compare objects
            writeObject.VerifyIsEqual(readObject);

            // Validate inspector stream
            byte[] readerInspectorBytes = readerInspector.ToByteArray();
            if (!ArrayComparer<byte>.Equals(readerInspectorBytes, serialized))
            {
                throw new InvalidOperationException("ISerializationInspector byte stream does not match the serialized byte stream.");
            }
        }

        private void TestComplexObjectSerialization(
            ObjectReaderWriterFactory factory)
        {
            const int BufferSizeInBytes = 64 * 1024;

            Stopwatch writeStopWatch = new Stopwatch();
            Stopwatch readStopWatch = new Stopwatch();

            ComplexObject writeObject = ComplexObject.Create();

            byte[] serialized;

            var writerInspector = new TestSerializationInspector();

            // Serialize the test object to a byte array
            using (var stream = new MemoryStream(BufferSizeInBytes))
            {
                var writer = factory.CreateWriter(stream);

                writer.Inspector = writerInspector;

                writeStopWatch.Start();

                ComplexObject.WriteTo(writer, writeObject);

                writeStopWatch.Stop();

                serialized = stream.ToArray();
            }

            //string writeDump = serialized.ToAsciiDumpString();
            //Debug.WriteLine(writeDump);

            Test.Output("{0} writer wrote {1} bytes in {2}ms", factory.Name, serialized.Length, writeStopWatch.ElapsedMilliseconds);

            // Validate inspector stream
            byte[] writerInspectorBytes = writerInspector.ToByteArray();
            if (!ArrayComparer<byte>.Equals(writerInspectorBytes, serialized))
            {
                throw new InvalidOperationException("ISerializationInspector byte stream does not match the serialized byte stream.");
            }

            var readerInspector = new TestSerializationInspector();

            ComplexObject readObject = null;

            // Deserialize the test object from a byte array
            using (var stream = new MemoryStream(serialized))
            {
                var reader = factory.CreateReader(stream);

                reader.Inspector = readerInspector;

                readStopWatch.Start();

                readObject = ComplexObject.ReadFrom(reader);

                readStopWatch.Stop();
            }

            Test.Output("{0} reader read {1} bytes in {2}ms", factory.Name, serialized.Length, readStopWatch.ElapsedMilliseconds);

            // Serialize the deserialized object for comparison
            byte[] deserialized;
            using (var stream = new MemoryStream(BufferSizeInBytes))
            {
                var writer = factory.CreateWriter(stream);

                ComplexObject.WriteTo(writer, readObject);

                deserialized = stream.ToArray();
            }

            // Compare serialized values
            if (!ArrayComparer<byte>.Equals(serialized, deserialized))
            {
                throw new Exception("Serialized and deserialized streams do not match.");
            }

            // Compare objects
            writeObject.VerifyIsEqual(readObject);

            // Validate inspector stream
            byte[] readerInspectorBytes = readerInspector.ToByteArray();
            if (!ArrayComparer<byte>.Equals(readerInspectorBytes, serialized))
            {
                throw new InvalidOperationException("ISerializationInspector byte stream does not match the serialized byte stream.");
            }
        }

        internal sealed class TestSerializationInspector : ISerializationInspector
        {
            private MemoryStream _stream = new MemoryStream();

            public TestSerializationInspector()
            {
            }

            public void AddContent(byte[] bytes, int offset, int count)
            {
                this._stream.Write(bytes, offset, count);
            }

            public byte[] ToByteArray()
            {
                return this._stream.ToArray();
            }
        }

    }
}
