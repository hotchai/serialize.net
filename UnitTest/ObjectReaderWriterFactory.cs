#region License
// Copyright (c) 2014, David Taylor
//
// Permission to use, copy, modify, and/or distribute this software for any 
// purpose with or without fee is hereby granted, provided that the above 
// copyright notice and this permission notice appear in all copies, unless 
// such copies are solely in the form of machine-executable object code 
// generated by a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES 
// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF 
// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR 
// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES 
// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN 
// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF 
// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#endregion License
using System;
using System.IO;
using HotChai.Serialization.Json;
using HotChai.Serialization.PortableBinary;
using HotChai.Serialization.Xml;
using HotChai.Serialization.Bencoding;

namespace HotChai.Serialization.UnitTest
{
    public abstract class ObjectReaderWriterFactory
    {
        private string _name;

        protected ObjectReaderWriterFactory(
            string name)
        {
            this._name = name;
        }

        public string Name
        {
            get { return this._name; }
        }

        public abstract ObjectReader CreateReader(Stream stream);
        public abstract ObjectWriter CreateWriter(Stream stream);
    }

    public sealed class PortableBinaryObjectReaderWriterFactory : ObjectReaderWriterFactory
    {
        public PortableBinaryObjectReaderWriterFactory()
            : base("PortableBinary")
        {
        }

        public override ObjectReader CreateReader(Stream stream)
        {
            return new PortableBinaryObjectReader(stream);
        }

        public override ObjectWriter CreateWriter(Stream stream)
        {
            return new PortableBinaryObjectWriter(stream);
        }
    }

    public sealed class JsonObjectReaderWriterFactory : ObjectReaderWriterFactory
    {
        public JsonObjectReaderWriterFactory()
            : base("Json")
        {
        }

        public override ObjectReader CreateReader(Stream stream)
        {
            return new JsonObjectReader(stream);
        }

        public override ObjectWriter CreateWriter(Stream stream)
        {
            return new JsonObjectWriter(stream);
        }
    }

    public sealed class XmlObjectReaderWriterFactory : ObjectReaderWriterFactory
    {
        public XmlObjectReaderWriterFactory()
            : base("Xml")
        {
        }

        public override ObjectReader CreateReader(Stream stream)
        {
            return new XmlObjectReader(stream);
        }

        public override ObjectWriter CreateWriter(Stream stream)
        {
            return new XmlObjectWriter(stream);
        }
    }

    public sealed class BencodingObjectReaderWriterFactory : ObjectReaderWriterFactory
    {
        public BencodingObjectReaderWriterFactory()
            : base("Bencoding")
        {
        }

        public override ObjectReader CreateReader(Stream stream)
        {
            return new BencodingObjectReader(stream);
        }

        public override ObjectWriter CreateWriter(Stream stream)
        {
            return new BencodingObjectWriter(stream);
        }
    }
}
