#region License
// Copyright (c) 2014, David Taylor
//
// Permission to use, copy, modify, and/or distribute this software for any 
// purpose with or without fee is hereby granted, provided that the above 
// copyright notice and this permission notice appear in all copies, unless 
// such copies are solely in the form of machine-executable object code 
// generated by a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES 
// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF 
// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR 
// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES 
// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN 
// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF 
// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#endregion License
using System;
using System.Diagnostics;
using System.IO;
using HotChai.Serialization.Json;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace HotChai.Serialization.UnitTest
{
    public sealed class Person
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public int[] Scores { get; set; }
    }

    [TestClass]
    public sealed class EncodingDemoTests
    {
        [TestMethod]
        [TestCategory("Demo")]
        public void SerializePersonTest()
        {
            Person person = new Person()
            {
                Id = 1,
                Name = "Foo",
            };

            SerializePersonTest(person, new PortableBinaryObjectReaderWriterFactory());
            SerializePersonTest(person, new BencodingObjectReaderWriterFactory());
            SerializePersonTest(person, new JsonObjectReaderWriterFactory());
            SerializePersonTest(person, new XmlObjectReaderWriterFactory());
        }

        public static void SerializePersonTest(Person person, ObjectReaderWriterFactory factory)
        {
            using (MemoryStream stream = new MemoryStream())
            {
                SerializePerson(person, factory.CreateWriter(stream));

                byte[] serialized = stream.ToArray();

                string writeDump = serialized.ToAsciiDumpString();
                Debug.WriteLine(writeDump);

                Test.Output("{0} writer wrote {1} bytes", factory.Name, serialized.Length);

                stream.Position = 0;

                DeserializePerson(factory.CreateReader(stream));
            }
        }

        public static void SerializePerson(Person person, IObjectWriter writer)
        {
            if (writer.WriteStartObject(person))
            {
                writer.WriteMember(1, person.Id);
                writer.WriteMember(2, person.Name);
                writer.WriteEndObject();
            }

            writer.Flush();
        }

        public static Person DeserializePerson(IObjectReader reader)
        {
            Person person = null;

            if (reader.ReadStartObject())
            {
                person = new Person();

                while (reader.ReadNextMemberKey())
                {
                    if (reader.MemberKey == 1)
                    {
                        person.Id = reader.ReadValueAsInt32();
                    }
                    else if (reader.MemberKey == 2)
                    {
                        person.Name = reader.ReadValueAsString(250);
                    }
                }

                reader.ReadEndObject();
            }

            return person;
        }
    }
}
