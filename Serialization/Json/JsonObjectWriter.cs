#region License
// Copyright (c) 2014, David Taylor
//
// Permission to use, copy, modify, and/or distribute this software for any 
// purpose with or without fee is hereby granted, provided that the above 
// copyright notice and this permission notice appear in all copies, unless 
// such copies are solely in the form of machine-executable object code 
// generated by a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES 
// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF 
// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR 
// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES 
// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN 
// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF 
// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#endregion License
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Text;

namespace HotChai.Serialization.Json
{
    public sealed class JsonObjectWriter : ObjectWriter
    {
        private enum WriterState
        {
            None,
            Object,
            ObjectMember,
            Array,
            ArrayValue,
        }

        private InspectorStream _stream;
        private BinaryWriter _writer;
        private StateManager<WriterState> _state;

        public JsonObjectWriter(
            Stream stream)
        {
            if (null == stream)
            {
                throw new ArgumentNullException("stream");
            }

            this._stream = new InspectorStream(stream);
            this._writer = new BinaryWriter(this._stream, Encoding.UTF8);
            this._state = new StateManager<WriterState>();
            this._state.Push(WriterState.None);
        }

        public override ISerializationInspector Inspector
        {
            get
            {
                return this._stream.Inspector;
            }

            set
            {
                this._stream.Inspector = value;
            }
        }

        public override void WriteStartObject()
        {
            WriteArrayValueSeparator();

            this._state.Push(WriterState.Object);

            Write('{');
        }

        public override void WriteStartMember(
            int memberKey)
        {
            if (this._state.Value == WriterState.Object)
            {
                this._state.Set(WriterState.ObjectMember);
            }
            else if (this._state.Value == WriterState.ObjectMember)
            {
                WriteMemberSeparator();
            }
            else
            {
                throw new InvalidOperationException();
            }

            Write('"');
            Write(memberKey.ToString(CultureInfo.InvariantCulture));
            Write('"');
            Write(':');
        }

        public override void WriteEndMember()
        {
            if (this._state.Value != WriterState.ObjectMember)
            {
                throw new InvalidOperationException();
            }
        }

        public override void WriteEndObject()
        {
            Write(JsonToken.EndObject);

            this._state.Pop();
        }

        public override void WriteStartArray()
        {
            WriteArrayValueSeparator();

            Write(JsonToken.StartArray);

            this._state.Push(WriterState.Array);
        }

        public override void WriteEndArray()
        {
            Write(JsonToken.EndArray);

            this._state.Pop();
        }

        public override void WriteNullValue()
        {
            WriteArrayValueSeparator();

            Write(JsonToken.Null);
        }

        public override void WriteValue(
            bool value)
        {
            WriteArrayValueSeparator();

            if (value)
            {
                Write(JsonToken.True);
            }
            else
            {
                Write(JsonToken.False);
            }
        }

        public override void WriteValue(
            int value)
        {
            WriteArrayValueSeparator();

            Write(value.ToString(CultureInfo.InvariantCulture));
        }

        public override void WriteValue(
            uint value)
        {
            WriteArrayValueSeparator();

            Write(value.ToString(CultureInfo.InvariantCulture));
        }

        public override void WriteValue(
            long value)
        {
            WriteArrayValueSeparator();

            Write(value.ToString(CultureInfo.InvariantCulture));
        }

        public override void WriteValue(
            ulong value)
        {
            WriteArrayValueSeparator();

            Write(value.ToString(CultureInfo.InvariantCulture));
        }

        public override void WriteValue(
            float value)
        {
            WriteArrayValueSeparator();

            Write(value.ToString("R"));
        }

        public override void WriteValue(
            double value)
        {
            WriteArrayValueSeparator();

            Write(value.ToString("R"));
        }

        public override void WriteValue(
            byte[] value)
        {
            WriteArrayValueSeparator();

            if (null == value)
            {
                Write(JsonToken.Null);
            }
            else
            {
                // TODO: Efficient Base64 stream encoding directly to BinaryWriter
                string encodedString = Convert.ToBase64String(value);

                Write('"');
                Write(encodedString);
                Write('"');
            }
        }

        List<char> _surrogates = new List<char>();

        public override void WriteValue(
            string value)
        {
            WriteArrayValueSeparator();

            if (null == value)
            {
                Write(JsonToken.Null);
            }
            else
            {
                Write('"');
                foreach (char c in value)
                {
                    if (Char.IsSurrogate(c))
                    {
                        this._surrogates.Add(c);

                        if (this._surrogates.Count >= 2)
                        {
                            this._writer.Write(this._surrogates.ToArray());
                            this._surrogates.Clear();
                        }

                        continue;
                    }

                    if (c == '\\')
                    {
                        Write('\\');
                        Write('\\');
                    }
                    else if (c == '"')
                    {
                        Write('\\');
                        Write('"');
                    }
                    else if (c == '\b')
                    {
                        Write('\\');
                        Write('b');
                    }
                    else if (c == '\f')
                    {
                        Write('\\');
                        Write('f');
                    }
                    else if (c == '\n')
                    {
                        Write('\\');
                        Write('n');
                    }
                    else if (c == '\r')
                    {
                        Write('\\');
                        Write('r');
                    }
                    else if (c == '\t')
                    {
                        Write('\\');
                        Write('t');
                    }
                    else if (Char.IsControl(c))
                    {
                        Write('\\');
                        Write('u');
                        Write(((ushort)c).ToString("x4"));
                    }
                    else
                    {
                        Write(c);
                    }
                }
                Write('"');
            }
        }

        public override void Flush()
        {
            this._writer.Flush();
        }

        private void WriteArrayValueSeparator()
        {
            if (this._state.Value == WriterState.ArrayValue)
            {
                Write(',');
            }
            else if (this._state.Value == WriterState.Array)
            {
                this._state.Set(WriterState.ArrayValue);
            }
        }

        private void WriteMemberSeparator()
        {
            Write(',');
        }

        private void Write(
            char value)
        {
            this._writer.Write(value);
        }

        private void Write(
            string value)
        {
            // NOTE: BinaryWriter writes an unwanted length prefix for the String type,
            // so we convert to a byte[] first as a workaround.
            // TODO: Remove this workaround
            byte[] bytes = Encoding.UTF8.GetBytes(value);
            this._writer.Write(bytes);
        }
    }
}
